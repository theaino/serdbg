// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/serial.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Serial_GetMode_FullMethodName    = "/proto.Serial/GetMode"
	Serial_SetMode_FullMethodName    = "/proto.Serial/SetMode"
	Serial_GetPort_FullMethodName    = "/proto.Serial/GetPort"
	Serial_SetPort_FullMethodName    = "/proto.Serial/SetPort"
	Serial_SendString_FullMethodName = "/proto.Serial/SendString"
)

// SerialClient is the client API for Serial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerialClient interface {
	GetMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Mode, error)
	SetMode(ctx context.Context, in *Mode, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPort(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Port, error)
	SetPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Error, error)
	SendString(ctx context.Context, in *SendStringRequest, opts ...grpc.CallOption) (*Error, error)
}

type serialClient struct {
	cc grpc.ClientConnInterface
}

func NewSerialClient(cc grpc.ClientConnInterface) SerialClient {
	return &serialClient{cc}
}

func (c *serialClient) GetMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Mode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mode)
	err := c.cc.Invoke(ctx, Serial_GetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialClient) SetMode(ctx context.Context, in *Mode, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Serial_SetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialClient) GetPort(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, Serial_GetPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialClient) SetPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, Serial_SetPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialClient) SendString(ctx context.Context, in *SendStringRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, Serial_SendString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerialServer is the server API for Serial service.
// All implementations must embed UnimplementedSerialServer
// for forward compatibility.
type SerialServer interface {
	GetMode(context.Context, *emptypb.Empty) (*Mode, error)
	SetMode(context.Context, *Mode) (*emptypb.Empty, error)
	GetPort(context.Context, *emptypb.Empty) (*Port, error)
	SetPort(context.Context, *Port) (*Error, error)
	SendString(context.Context, *SendStringRequest) (*Error, error)
	mustEmbedUnimplementedSerialServer()
}

// UnimplementedSerialServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSerialServer struct{}

func (UnimplementedSerialServer) GetMode(context.Context, *emptypb.Empty) (*Mode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMode not implemented")
}
func (UnimplementedSerialServer) SetMode(context.Context, *Mode) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedSerialServer) GetPort(context.Context, *emptypb.Empty) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedSerialServer) SetPort(context.Context, *Port) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPort not implemented")
}
func (UnimplementedSerialServer) SendString(context.Context, *SendStringRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendString not implemented")
}
func (UnimplementedSerialServer) mustEmbedUnimplementedSerialServer() {}
func (UnimplementedSerialServer) testEmbeddedByValue()                {}

// UnsafeSerialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerialServer will
// result in compilation errors.
type UnsafeSerialServer interface {
	mustEmbedUnimplementedSerialServer()
}

func RegisterSerialServer(s grpc.ServiceRegistrar, srv SerialServer) {
	// If the following call pancis, it indicates UnimplementedSerialServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Serial_ServiceDesc, srv)
}

func _Serial_GetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).GetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serial_GetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).GetMode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serial_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serial_SetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).SetMode(ctx, req.(*Mode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serial_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serial_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).GetPort(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serial_SetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).SetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serial_SetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).SetPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serial_SendString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).SendString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serial_SendString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).SendString(ctx, req.(*SendStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Serial_ServiceDesc is the grpc.ServiceDesc for Serial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Serial",
	HandlerType: (*SerialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMode",
			Handler:    _Serial_GetMode_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _Serial_SetMode_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _Serial_GetPort_Handler,
		},
		{
			MethodName: "SetPort",
			Handler:    _Serial_SetPort_Handler,
		},
		{
			MethodName: "SendString",
			Handler:    _Serial_SendString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/serial.proto",
}
